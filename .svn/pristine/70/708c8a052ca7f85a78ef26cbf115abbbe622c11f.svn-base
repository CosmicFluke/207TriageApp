package com.group0931.triagephase2;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

/**
 * {@code Activity} that displays the personal data, a record of visits, 
 * and options for adding new information about the current patient
 * (i.e. the patient in {@code CurrentPatient}).
 * @author Christina Chung, Asher MindenWebb, Angel You.
 *
 */
public class PatientActivity extends Activity {
	
	/**A {@ Manager}; for manipulating the patient database.*/
	Manager manager;
	
	/**The current patient.*/
	Patient patient;
	
	/**The current patient's visits (as {@code TimeStamps}).*/
	ArrayList<TimeStamp> visitTimes;
	
	VisitAdapter listAdapter;
	
	/**The display for the current patient's visits.*/
	ListView visitsListView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		Log.d("D", "patientactivityhere");
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_patient);
		
		this.patient = null;
		
		// Gets the current patient to display
		try {
			patient = CurrentPatient.get();
		} catch (CurrentPatientNotSetException e) {
			System.out.println("No patient to display.");
			e.printStackTrace();
			finish();
		}
		
		// Sets the activity title to the patient's name and health card number
		setTitle(patient.getName() + " - " + 
				patient.getHealthCardNumber().toString());
		
		// Set text for basic patient info
		TextView healthNumBox = (TextView) findViewById(R.id.hcnField);
		TextView dobBox = (TextView) findViewById (R.id.dobField);
		TextView nameBox = (TextView) findViewById (R.id.nameField);
		healthNumBox.setText(patient.getHealthCardNumber().toString());
		dobBox.setText(patient.getDateOfBirth().toString());
		nameBox.setText(patient.getName().toString());
		
		// Finds the ListView for displaying patient visits
		this.visitsListView = (ListView) findViewById(R.id.visitsListView);
	}

	@Override
	protected void onResume() {
		super.onResume();
		// Ensures that the patient has visits to load, and loads them
		if (this.patient.hasVisited()) {
			this.visitTimes = (ArrayList<TimeStamp>) this.patient.getVisitTimes();
		} else {
			this.visitTimes = new ArrayList<TimeStamp>();
		}
		
		// Attempts to populate the list of visits
		try {
			populatePatientVisitsList();
		} catch (VisitsNotLoadedException e) {
			e.printStackTrace();
		}
	}
	
	/** 
	 * Populates the list of the patient's visits.
	 * @throws VisitsNotLoadException When the current patient's
	 * visits have not yet been loaded into memory. 
	 */
	private void populatePatientVisitsList() throws VisitsNotLoadedException{

        this.listAdapter = new VisitAdapter(this, this.visitTimes);
        
        // Assign the VisitAdapter to the ListView for the visits List
        this.visitsListView.setAdapter(this.listAdapter);
        this.visitsListView.setOnItemClickListener(new OnItemClickListener() {
        	
		@Override
		public void onItemClick(AdapterView<?> parent, View view,
				int position, long id) {
		    
			try {
				goToVisit(patient.getVisitByDate(visitTimes.get(position)));
			} catch (NoSuchEntryException e) {
				e.printStackTrace();
			}
		}
		});        
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.patient_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		if (id == R.id.addVital) {
			goToAddVital();
		}
		return super.onOptionsItemSelected(item);
	}
	
	/**
	 * Goes to the activity for viewing the details about a selected visit
	 * @param visit The {@code PatientVisit} to go to.
	 */
	private void goToVisit(PatientVisit visit){
		CurrentVisit.set(visit);
		Intent visitIntent = new Intent(this, VisitActivity.class);
		startActivity(visitIntent);
	}
	
	/**
	 * Launches fragment for user to create a new visit.
	 * @param thisView The view from which this method is called.
	 */
	public void goToCreateVisit(View thisView) {
		Intent i = new Intent(this, CreateVisitActivity.class);
		this.startActivityForResult(i, 0);
	}
	
	/**
	 * Starts the activity for adding vital signs
	 * @param view The View from which the method is called. 
	 */
	public void goToAddVital(){
		Intent i = new Intent(this, AddVitalActivity.class);
		this.startActivity(i);
	}
	
	/** 
	 * Attempts to refresh Visit Times list after returning from CreateVisitActivity.
	 * @param requestCode The request code.
	 * @param resultCode The result code.
	 * @param data The intent.
	 */
	public void onActivityResult(int requestCode, int resultCode, Intent data){
		Log.d("onActivityResult", "onActivityResult method was called");
		if (resultCode == RESULT_OK){
			Log.d("RESULT_OK", "onActivityResult resultCode was RESULT_OK");
			this.visitTimes = patient.getVisitTimes();
			this.listAdapter.notifyDataSetChanged();
		}
	}
	
	/**
	 * Displays a message to the user by launching a
	 * {@code MessageDisplayActivity}.
	 * @param message The message to be displayed.
	 */
	public void displayMessage(String message) {
		Intent i = new Intent(this, MessageDisplayActivity.class);
		i.putExtra("DISPLAYMESSAGE", message);
		this.startActivity(i);
	}
}
