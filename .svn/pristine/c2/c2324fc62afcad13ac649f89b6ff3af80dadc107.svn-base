package com.group0931.triagephase2;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.util.TreeSet;


/**
 * A patient of the ER.
 * @author Christina Chung, Asher Minden-Webb, Angel You.
 *
 */
public class Patient implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/** This {@code Patient}'s health card number. */
	private HealthNumber healthCardNumber;
	
	/** This {@code Patient}'s name. */
	private PersonName name;
	
	/** This {@code Patient}'s date of birth. */
	private TimeStamp dateOfBirth; 
	
	/** True iff the patient has been seen by a doctor during 
	 * their most recent visit. */
	private boolean wasSeen;
	
	
	/** 
	 * Indicates whether the patient has any visit records.
	 * <br>- Is {@code true} iff the patient has visit 
	 * records in memory OR visits saved to file.
	 * <br>- {@code hasVisits} interacts with the 
	 * {@code isLoaded()}, to indicate whether 
	 * there are visits to be loaded from file.
	 * <br>- {@code hasVisits} has an implicit contract with
	 *  {@code addVisit()}, such that no new visit
	 * may be added to the record until {@code isLoaded()} 
	 * will return {@code true}.
	 */
	private boolean hasVisits;
	
	/** Record of all this {@code Patient}'s visits, ordered by arrival date */
	protected TreeMap<TimeStamp, PatientVisit> visits;
	
	/**
     * Constructs a Patient with health card number from healthCardNumber, 
     * full name from name and 
     * date of birth made up of year, month, and day.
     * @param healthNumber This {@code Patient}'s health card number.
     * @param name This {@code Patient}'s name.
     * @param dateOfBirth This {@code Patient}'s date of birth.
     */
	public Patient(HealthNumber healthNumber, PersonName name, TimeStamp dateOfBirth) {
		this.visits = new TreeMap<TimeStamp, PatientVisit>();
		this.healthCardNumber = healthNumber;
        this.name = name;
        this.dateOfBirth = dateOfBirth;
        this.visits = new TreeMap<TimeStamp, PatientVisit>();
        this.hasVisits = false;
        this.wasSeen = false;
	}
	
	/**
	 * Returns this {@code Patient}'s health card number. 
	 * @return This {@code Patient}'s healthNumber.
	 */
	public HealthNumber getHealthCardNumber() {
		return healthCardNumber;
	}
	
	/**
	 * Sets this {@code Patient}'s health card number. 
	 * @param healthCardNumber This {@code Patient}'s health card number.
	 */
	public void setHealthCardNumber(HealthNumber healthCardNumber) {
		this.healthCardNumber = healthCardNumber;
	}
	
	/**
	 * Returns this {@code Patient}'s name. 
	 * @return This {@code Patient}'s PersonName.
	 */
	public PersonName getName() {
		return name;
	}
	
	/**
	 * Sets this {@code Patient}'s name. 
	 * @param name This {@code Patient}'s name.
	 */
	public void setName(PersonName name) {
		this.name = name;
	}
	
	/**
	 * Returns this {@code Patient}'s date of birth. 
	 * @return This {@code Patient}'s dateOfBirth.
	 */
	public TimeStamp getDateOfBirth() {
		return this.dateOfBirth;
	}
	
	/**
	 * Sets this {@code Patient}'s date of birth. 
	 * @param dateOfBirth This {@code Patient}'s data of birth. 
	 */
	public void setDateOfBirth(TimeStamp dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	
	/**
	 * Returns whether this {@code Patient}'s visit record has at least one entry.
	 * @return true iff this {@code Patient}'s visit record has at least one entry.
	 */
	public boolean hasVisited() {
		return this.hasVisits;
	}
	
	/**
	 * Returns this {@code Patient}'s most recent visit (by arrival time). 
	 * @return This {@code Patient}'s most recent visit (by arrival time). 
	 * @throws NoVisitsException TODO
	 */
	public PatientVisit getLastVisit() 
			throws VisitsNotLoadedException, NoVisitsException {
		if (!this.isLoaded()){
			throw new VisitsNotLoadedException();
		}
		if (!this.hasVisits){
			throw new NoVisitsException();
		}
		return visits.get(visits.lastKey());
	}
	
	/**
	 * Returns the visit entry corresponding to the given date. 
	 * @param date The data of arrival for the visit.
	 * @return The visit corresponding to the date given.
	 * @throws NoSuchEntryException When this {@code Patient}
	 * did not visit the ER at the given date.
	 */
	public PatientVisit getVisitByDate(TimeStamp date) 
			throws NoSuchEntryException {
		if (this.visits.containsKey(date)){
			return visits.get(date);
		}
		else {
			throw new NoSuchEntryException();
		}
	}
	
	/**
	 * Adds a visit to this {@code Patient}'s visit record.
	 * @param visit The new visit entry to be added.
	 * @throws MultipleVisitException When when a new 
	 * visit entry is attempted to be created and
	 * this {@code Patient} currently has an active visit and
	 * has not yet been seen by a doctor.
	 * @throws VisitsNotLoadedException When this {@code Patient}
	 * does not have a previous visit. 
	 * @throws NoVisitsException TODO
	 */
	public void addVisit (PatientVisit visit) throws 
		MultipleVisitException, VisitsNotLoadedException, NoVisitsException {
		if (this.hasNotBeenSeen() && this.hasVisited()){
			throw new MultipleVisitException();
		} else {
			this.visits.put(visit.getArrivalTime(), visit);
			this.hasVisits = true;
			this.wasSeen = false;
		}
	}
	
	/**
	 * Returns the set of all arrival times for this {@code Patient}'s visits.
	 * @return the set of all arrival times for this {@code Patient}'s visits. 
	 */
	public ArrayList<TimeStamp> getVisitTimes (){
		return new ArrayList<TimeStamp>(new TreeSet<TimeStamp>(visits.keySet()));
	}
	
	/**
	 * Sets the time for which this
	 * {@code Patient} was last seen by a doctor.
	 * @param when The time for which
	 * this {@code Patient} was last seen by a doctor.
	 */
	public void makeSeen(){
		this.wasSeen = true;
	}
	
	/**
	 * Returns 
	 * @return True iff the patient has not been seen by a doctor during their
	 * most recent visit.  False if the patient has no visits.
	 */
	public boolean hasNotBeenSeen(){
		return !this.wasSeen;
	}
	
	/** 
	 * Indicates whether this {@code Patient}'s visits (if any exist) 
	 * have been loaded into memory.
	 * <br>- Check this first before adding any visits or 
	 * attempting to access visits
	 * <br>- If this returns false, use {@code FileManager}.
	 * loadPatientVisits({@code Manager} root, 
	 * HealthNumber healthNum) to load data from file(s).
	 * @return true iff all visits have been loaded into
	 * memory OR there are no visits to load.
	 */
	public boolean isLoaded() {
		return (visits.isEmpty() && !this.hasVisits) || !visits.isEmpty();
	}
	
	@Override
	public String toString(){
        return this.healthCardNumber + "\n" + 
        		this.name.toString() + ", " + this.dateOfBirth;
	}
	
	/** This method is *only* to be used for serialization.<br>
	 * Serialize this object in a distinct file, named using the Patient's health card number.<br>
	 * @return all PatientVisit objects for this Visitor
	 */
	protected ArrayList<PatientVisit> getVisitsList() {
		return new ArrayList<PatientVisit>(this.visits.values());
	}
	
	/**
	 * **NOT IMPLEMENTED IN PHASE 2.**<br>
	 * Returns this Patient's age.
	 * @return This Patient's age.
	 */
	public int calculateAge(){
		TimeStamp currentDate = new TimeStamp();
		int age = currentDate.getYear()- dateOfBirth.getYear();  
		if (currentDate.getMonth() < dateOfBirth.getMonth()) {
		  age--;  
		} else if (currentDate.getMonth() == dateOfBirth.getMonth()
		    && currentDate.getMonth() < dateOfBirth.getDay()) {
		  age--;  
		}
		return age;
	}
	
	/**
	 * **NOT IMPLEMENTED IN PHASE 2.**<br>
	 * **To be used only for serialization
	 * 
	 * @return a copy of the {@code visits} map 
	 * (TimeStamps to PatientVisit objects)
	 */
	protected Map<TimeStamp, PatientVisit> getVisitsForSerialization() {
		return new TreeMap<TimeStamp, PatientVisit>(visits);
	}

}
